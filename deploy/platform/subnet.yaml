AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  HasJumphost:
    Fn::Not:
    - Fn::Equals:
      - !Ref KeyPairName
      - ''
  ThirdAZExist:
    Fn::Not:
    - Fn::Equals:
      - !Ref PublicSubnetCCIDR
      - ''
Description: Infrastructure Automation for Subnets, IGW and Routes for 4-Tier VPC
Mappings:
  JumpboxAMI:
    ap-northeast-1:
      '64': ami-374db956
    ap-northeast-2:
      '64': ami-2b408b45
    ap-south-1:
      '64': ami-ffbdd790
    ap-southeast-1:
      '64': ami-a59b49c6
    ap-southeast-2:
      '64': ami-dc361ebf
    eu-central-1:
      '64': ami-ea26ce85
    eu-west-1:
      '64': ami-f9dd458a
    sa-east-1:
      '64': ami-6dd04501
    us-east-1:
      '64': ami-6869aa05
    us-west-1:
      '64': ami-31490d51
    us-west-2:
      '64': ami-7172b611
Outputs:
  PrivateRouteTableIds:
    Description: Route Table Ids for the VPC
    Value:
      Fn::If:
      - ThirdAZExist
      - Fn::Join:
        - ','
        - - !Ref PrivateRouteTableA
          - !Ref PrivateRouteTableB
          - !Ref PrivateRouteTableC
      - Fn::Join:
        - ','
        - - !Ref PrivateRouteTableA
          - !Ref PrivateRouteTableB
  PrivateSubnetAId:
    Description: Subnet Id for Private Tier
    Value:
      !Ref PrivateSubnetA
  PrivateSubnetBId:
    Description: Subnet Id for Private Tier
    Value:
      !Ref PrivateSubnetB
  PrivateSubnetCId:
    Condition: ThirdAZExist
    Description: Subnet Id for Private Tier
    Value:
      !Ref PrivateSubnetC
  PrivateSubnetIds:
    Description: List of Subnet Ids in Private Tier
    Value:
      Fn::If:
      - ThirdAZExist
      - Fn::Join:
        - ','
        - - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC
      - Fn::Join:
        - ','
        - - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
  # PrivateNetworkAclId:
  #   Description: Network ACLs for Private Tier
  #   Value:
  #     !Ref PrivateNetworkAcl
  JumpboxSecurityGroup:
    Condition: HasJumphost
    Value:
      !Ref JumpboxSecurityGroup
  PublicRouteTableIds:
    Description: Route Table Ids for the VPC
    Value:
      !Ref PublicRouteTable
  PublicSubnetAId:
    Description: Subnet Id for Public Tier
    Value:
      !Ref PublicSubnetA
  PublicSubnetBId:
    Description: Subnet Id for Public Tier
    Value:
      !Ref PublicSubnetB
  PublicSubnetCId:
    Condition: ThirdAZExist
    Description: Subnet Id for Public Tier
    Value:
      !Ref PublicSubnetC
  PublicSubnetIds:
    Description: List of Subnet Ids in Public Tier
    Value:
      Fn::If:
      - ThirdAZExist
      - Fn::Join:
        - ','
        - - !Ref PublicSubnetA
          - !Ref PublicSubnetB
          - !Ref PublicSubnetC
      - Fn::Join:
        - ','
        - - !Ref PublicSubnetA
          - !Ref PublicSubnetB
  # PublicNetworkAclId:
  #   Description: Network ACLs for Public Tier
  #   Value:
  #     !Ref PublicNetworkAcl
Parameters:
  PrivateSubnetACIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: The IP address range for a subnet of the VPC
    MaxLength: '18'
    MinLength: '9'
    Type: String
  PrivateSubnetBCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: The IP address range for a subnet of the VPC
    MaxLength: '18'
    MinLength: '9'
    Type: String
  PrivateSubnetCCIDR:
    Default: ''
    Description: The IP address range for a subnet of the VPC (optional)
    Type: String
  PublicSubnetACIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: The IP address range for a subnet of the VPC
    MaxLength: '18'
    MinLength: '9'
    Type: String
  PublicSubnetBCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: The IP address range for a subnet of the VPC
    MaxLength: '18'
    MinLength: '9'
    Type: String
  PublicSubnetCCIDR:
    Default: ''
    Description: The IP address range for a subnet of the VPC (optional)
    Type: String
  Environment:
    AllowedPattern: '[A-Za-z][A-Za-z0-9\-]*'
    Type: String
  KeyPairName:
    Default: ''
    Description: 'Name of an existing EC2 KeyPair (find or create here: https://console.aws.amazon.com/ec2/v2/home#KeyPairs:
      )'
    Type: String
  Name:
    AllowedPattern: '[A-Za-z][A-Za-z0-9\-]*'
    Type: String
  AllowedCIDRAccess:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: Lockdown SSH access to the bastion host (default can be accessed from anywhere)
    MaxLength: '18'
    MinLength: '9'
    Type: String
    Default: '0.0.0.0/0'
  QualifiedName:
    AllowedPattern: '[A-Za-z][A-Za-z0-9\-]*'
    Type: String
  SearchHostedZone:
    Default: ''
    Type: String
  VPCId:
    Description: The physical ID of the VPC
    Type: AWS::EC2::VPC::Id
  VirtualPrivateGatewayId:
    Default: ''
    Type: String
Resources:
  PrivateRouteTableA:
    Properties:
      Tags:
      - Key: Name
        Value:
          !Sub rt-${QualifiedName}-Private-A
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Private
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::RouteTable
  PrivateRouteTableB:
    Properties:
      Tags:
      - Key: Name
        Value:
          !Sub rt-${QualifiedName}-Private-B
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Private
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::RouteTable
  PrivateRouteTableC:
    Condition: ThirdAZExist
    Properties:
      Tags:
      - Key: Name
        Value:
          !Sub rt-${QualifiedName}-Private-C
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Private
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::RouteTable
  PrivateSubnetA:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            !Ref AWS::Region
      CidrBlock:
        !Ref PrivateSubnetACIDR
      Tags:
      - Key: Name
        Value:
          !Sub ${Environment}-Private-A
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Private
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::Subnet
  PrivateSubnetARouteTableAssociation:
    Properties:
      RouteTableId:
        !Ref PrivateRouteTableA
      SubnetId:
        !Ref PrivateSubnetA
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetB:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            !Ref AWS::Region
      CidrBlock:
        !Ref PrivateSubnetBCIDR
      Tags:
      - Key: Name
        Value:
          !Sub ${Environment}-Private-B
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Private
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::Subnet
  PrivateSubnetBRouteTableAssociation:
    Properties:
      RouteTableId:
        !Ref PrivateRouteTableB
      SubnetId:
        !Ref PrivateSubnetB
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetC:
    Condition: ThirdAZExist
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs:
            !Ref AWS::Region
      CidrBlock:
        !Ref PrivateSubnetCCIDR
      Tags:
      - Key: Name
        Value:
          !Sub ${Environment}-Private-C
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Private
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::Subnet
  PrivateSubnetCRouteTableAssociation:
    Condition: ThirdAZExist
    Properties:
      RouteTableId:
        !Ref PrivateRouteTableC
      SubnetId:
        !Ref PrivateSubnetC
    Type: AWS::EC2::SubnetRouteTableAssociation
  # PrivateNetworkAcl:
  #   Properties:
  #     Tags:
  #     - Key: Name
  #       Value:
  #         !Sub ${AWS::StackName}-Private-Nacl
  #     - Key: Application
  #       Value:
  #         !Ref AWS::StackName
  #     - Key: Network
  #       Value: Private
  #     VpcId:
  #       !Ref VPCId
  #   Type: AWS::EC2::NetworkAcl
  # PrivateSubnetANetworkAclAssociation:
  #   Properties:
  #     NetworkAclId:
  #       !Ref PrivateNetworkAcl
  #     SubnetId:
  #       !Ref PrivateSubnetA
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  # PrivateSubnetBNetworkAclAssociation:
  #   Properties:
  #     NetworkAclId:
  #       !Ref PrivateNetworkAcl
  #     SubnetId:
  #       !Ref PrivateSubnetB
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  # PrivateSubnetCNetworkAclAssociation:
  #   Condition: ThirdAZExist
  #   Properties:
  #     NetworkAclId:
  #       !Ref PrivateNetworkAcl
  #     SubnetId:
  #       !Ref PrivateSubnetC
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  DHCPOptions:
    Properties:
      DomainName:
        Fn::Join:
        - ''
        - - !Ref AWS::Region
          - '.compute.internal '
          - !Ref Environment
          - .
          - !Ref SearchHostedZone
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value:
          !Sub dhcp-${QualifiedName}
    Type: AWS::EC2::DHCPOptions
  DHCPOptionsAssociation:
    Properties:
      DhcpOptionsId:
        !Ref DHCPOptions
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::VPCDHCPOptionsAssociation
  InternetPrivateARoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !Ref NATAzA
      RouteTableId:
        !Ref PrivateRouteTableA
    Type: AWS::EC2::Route
  InternetPrivateBRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !Ref NATAzB
      RouteTableId:
        !Ref PrivateRouteTableB
    Type: AWS::EC2::Route
  InternetPrivateCRoute:
    Condition: ThirdAZExist
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !Ref NATAzC
      RouteTableId:
        !Ref PrivateRouteTableC
    Type: AWS::EC2::Route
  InternetGateway:
    Properties:
      Tags:
      - Key: Name
        Value:
          !Sub igw-${QualifiedName}
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Public
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Properties:
      InternetGatewayId:
        !Ref InternetGateway
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::VPCGatewayAttachment
  Jumpbox:
    Condition: HasJumphost
    DependsOn: 
      - InternetGatewayAttachment
    Properties:
      DisableApiTermination: 'true'
      ImageId:
        Fn::FindInMap:
        - JumpboxAMI
        - !Ref AWS::Region
        - '64'
      InstanceType: t2.micro
      KeyName:
        !Ref KeyPairName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - !Ref JumpboxSecurityGroup
        SubnetId:
          !Ref PublicSubnetA
      SourceDestCheck: 'false'
      Tags:
      - Key: Name
        Value:
          !Sub jumpbox-${Environment}
      - Key: Environment
        Value:
          !Ref Environment
    Type: AWS::EC2::Instance
  JumpboxAccessSecurityGroup:
    Condition: HasJumphost
    Properties:
      GroupDescription: Security Group to allow Jumpbox to access other Instances
      SecurityGroupIngress:
      - FromPort: '22'
        IpProtocol: tcp
        SourceSecurityGroupId:
          !Ref JumpboxSecurityGroup
        ToPort: '22'
      Tags:
      - Key: Name
        Value: Jumpbox Access Security Group
      - Key: Environment
        Value:
          !Ref Environment
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::SecurityGroup
  JumpboxSecurityGroup:
    Properties:
      GroupDescription: Jumpbox Security Group
      SecurityGroupIngress:
      - CidrIp:
          !Ref AllowedCIDRAccess
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      Tags:
      - Key: Name
        Value: Jumpbox Security Group
      - Key: Environment
        Value:
          !Ref Environment
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::SecurityGroup
  NATAzA:
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPA
        - AllocationId
      SubnetId:
        !Ref PublicSubnetA
    Type: AWS::EC2::NatGateway
  NATAzB:
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPB
        - AllocationId
      SubnetId:
        !Ref PublicSubnetB
    Type: AWS::EC2::NatGateway
  NATAzC:
    Condition: ThirdAZExist
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPC
        - AllocationId
      SubnetId:
        !Ref PublicSubnetC
    Type: AWS::EC2::NatGateway
  NATEIPA:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  NATEIPB:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  NATEIPC:
    Condition: ThirdAZExist
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  PublicSubnetGatewayRoute:
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        !Ref InternetGateway
      RouteTableId:
        !Ref PublicRouteTable
    Type: AWS::EC2::Route
  S3VPCEndpoint:
    Properties:
      PolicyDocument:
        Statement:
        - Action: '*'
          Effect: Allow
          Principal: '*'
          Resource: '*'
        Version: '2012-10-17'
      RouteTableIds:
        Fn::If:
        - ThirdAZExist
        - - !Ref PrivateRouteTableA
          - !Ref PrivateRouteTableB
          - !Ref PrivateRouteTableC
        - - !Ref PrivateRouteTableA
          - !Ref PrivateRouteTableB
      ServiceName:
        !Sub com.amazonaws.${AWS::Region}.s3
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::VPCEndpoint
  PublicRouteTable:
    Properties:
      Tags:
      - Key: Name
        Value:
          !Sub rt-${QualifiedName}-Public
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Public
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::RouteTable
  PublicSubnetA:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            !Ref AWS::Region
      CidrBlock:
        !Ref PublicSubnetACIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value:
          !Sub ${Environment}-Public-A
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Public
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::Subnet
  PublicSubnetARouteTableAssociation:
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      SubnetId:
        !Ref PublicSubnetA
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnetB:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            !Ref AWS::Region
      CidrBlock:
        !Ref PublicSubnetBCIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value:
          !Sub ${Environment}-Public-B
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Public
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::Subnet
  PublicSubnetBRouteTableAssociation:
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      SubnetId:
        !Ref PublicSubnetB
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnetC:
    Condition: ThirdAZExist
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs:
            !Ref AWS::Region
      CidrBlock:
        !Ref PublicSubnetCCIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value:
          !Sub ${Environment}-Public-C
      - Key: Environment
        Value:
          !Ref Environment
      - Key: Zone
        Value: Public
      VpcId:
        !Ref VPCId
    Type: AWS::EC2::Subnet
  PublicSubnetCRouteTableAssociation:
    Condition: ThirdAZExist
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      SubnetId:
        !Ref PublicSubnetC
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnetGatewayRoute:
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        !Ref InternetGateway
      RouteTableId:
        !Ref PublicRouteTable
    Type: AWS::EC2::Route
  # PublicNetworkAcl:
  #   Properties:
  #     Tags:
  #     - Key: Name
  #       Value:
  #         !Sub ${AWS::StackName}-Public-Nacl
  #     - Key: Application
  #       Value:
  #         !Ref AWS::StackName
  #     - Key: Network
  #       Value: Public
  #     VpcId:
  #       !Ref VPCId
  #   Type: AWS::EC2::NetworkAcl
  # PublicSubnetANetworkAclAssociation:
  #   Properties:
  #     NetworkAclId:
  #       !Ref PublicNetworkAcl
  #     SubnetId:
  #       !Ref PublicSubnetA
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  # PublicSubnetBNetworkAclAssociation:
  #   Properties:
  #     NetworkAclId:
  #       !Ref PublicNetworkAcl
  #     SubnetId:
  #       !Ref PublicSubnetB
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  # PublicSubnetCNetworkAclAssociation:
  #   Condition: ThirdAZExist
  #   Properties:
  #     NetworkAclId:
  #       !Ref PublicNetworkAcl
  #     SubnetId:
  #       !Ref PublicSubnetC
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
